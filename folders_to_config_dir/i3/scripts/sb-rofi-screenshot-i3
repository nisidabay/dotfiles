#!/bin/bash

## rofi-screenshot
## Author: ceuk @ github
## Licence: WTFPL
## Usage: 
##    show the menu with rofi-screenshot
##    stop recording with rofi-screenshot -s


# Define the directory where screenshots and recordings will be saved.
screenshot_directory="$HOME/Pictures/Screenshots"

# Override the ffmpeg command to include default options for all operations.
ffmpeg() {
    command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

# Convert a video file to a GIF with optimized color palette.
video_to_gif() {
    ffmpeg -i "$1" -vf palettegen -f image2 -c:v png - |
    ffmpeg -i "$1" -i - -filter_complex paletteuse "$2"
}

# Display a countdown notification before starting recording.
countdown() {
  notify-send "Screenshot" "Recording in 3 seconds" -t 1000
  sleep 1
  notify-send "Screenshot" "Recording in 2 seconds" -t 1000
  sleep 1
  notify-send "Screenshot" "Recording in 1 seconds" -t 1000
  sleep 1
}

# Capture a selected screen region and copy it to the clipboard.
crtc() {
  notify-send "Screenshot" "Select a region to capture"
  ffcast -q $(slop -n -f '-g %g ') png /tmp/screenshot_clip.png
  xclip -selection clipboard -t image/png /tmp/screenshot_clip.png
  rm /tmp/screenshot_clip.png
  notify-send "Screenshot" "Region copied to Clipboard"
}

# Capture a selected screen region and save it as a file.
crtf() {
  notify-send "Screenshot" "Select a region to capture"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ') png "$screenshot_directory/$dt.png"
  notify-send "Screenshot" "Region saved to $screenshot_directory"
}

# Capture the entire screen and copy it to the clipboard.
cstc() {
  ffcast -q png /tmp/screenshot_clip.png
  xclip -selection clipboard -t image/png /tmp/screenshot_clip.png
  rm /tmp/screenshot_clip.png
  notify-send "Screenshot" "Screenshot copied to Clipboard"
}

# Capture the entire screen and save it as a file.
cstf() {
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q png "$screenshot_directory/$dt.png"
  notify-send "Screenshot" "Screenshot saved to $screenshot_directory"
}

# Record a selected screen region and save the recording as a GIF.
rgrtf() {
  notify-send "Screenshot" "Select a region to record"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ' && countdown) rec /tmp/screenshot_gif.mp4
  notify-send "Screenshot" "Converting to gif... (this can take a while)"
  video_to_gif /tmp/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm /tmp/screenshot_gif.mp4
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

# Record the entire screen and save the recording as a GIF.
rgstf() {
  countdown
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q rec /tmp/screenshot_gif.mp4
  notify-send "Screenshot" "Converting to gif... (this can take a while)"
  video_to_gif /tmp/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm /tmp/screenshot_gif.mp4
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

# Record a selected screen region and save it as an MP4 file.
rvrtf() {
  notify-send "Screenshot" "Select a region to record"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ' && countdown) rec "$screenshot_directory/$dt.mp4"
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

# Record the entire screen and save it as an MP4 file.
rvstf() {
  countdown
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q rec "$screenshot_directory/$dt.mp4"
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

# Outputs options for the rofi menu.
get_options() {
  echo "  Capture Region  Clip"
  echo "  Capture Region  File"
  echo "  Capture Screen  Clip"
  echo "  Capture Screen  File"
  echo "  Record Region  File (GIF)"
  echo "  Record Screen  File (GIF)"
  echo "  Record Region  File (MP4)"
  echo "  Record Screen  File (MP4)"
}

# Check for the existence of required dependencies.
check_deps() {
  missing_deps=0
  for dep in ffmpeg ffcast slop xclip notify-send rofi; do
    if ! command -v $dep &> /dev/null; then
      echo "Error: $dep is required but not installed."
      missing_deps=$((missing_deps + 1))
    fi
  done
  if [ $missing_deps -ne 0 ]; then
    exit 1
  fi
}

# Main function orchestrating the script's operations.
main() {
  # Check for required dependencies before proceeding.
  check_deps

  # Process script arguments.
  if [[ $1 == '--help' ]] || [[ $1 = '-h' ]]; then
    echo "USAGE: $(basename $0) [OPTION]"
    echo "Options:"
    echo "  --help, -h: Display this help message."
    echo "  --stop, -s: Stop ongoing recording."
    echo "  (no option): Show the screenshot menu."
    exit 0
  elif [[ $1 = '--stop' ]] || [[ $1 = '-s' ]]; then
    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
    exit 0
  fi

  # Display the screenshot menu using rofi and capture the user's choice.
  choice=$(get_options | rofi -dmenu -i -p "Screenshot" -matching fuzzy)

  # Execute the corresponding function based on the user's choice.
  case $choice in
    '  Capture Region  Clip') crtc ;;
    '  Capture Region  File') crtf ;;
    '  Capture Screen  Clip') cstc ;;
    '  Capture Screen  File') cstf ;;
    '  Record Region  File (GIF)') rgrtf ;;
    '  Record Screen  File (GIF)') rgstf ;;
    '  Record Region  File (MP4)') rvrtf ;;
    '  Record Screen  File (MP4)') rvstf ;;
    *) exit 1 ;; # Exit if no valid choice is made.
  esac
}

# Run the main function and pass all script arguments.
main "$@"
