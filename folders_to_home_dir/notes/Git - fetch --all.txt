git fetch --all
---------------

What it does: 
This command fetches updates from all remote branches in your repository. It
contacts the remote repository defined in origin (and any other remotes you have
set up) and pulls in any changes. This includes new branches, updated branches,
and tags.

When to use it: 
Use this command when you want to update your local repository's information
about all remote branches, especially if you're working in a repository with
multiple remotes or if there have been several updates across different
branches.

Explore the changes

Comparing Branches:
* You can compare your local branches with their updated remote counterparts
  using the git diff command.  

* For example, to compare your local master branch with the updated remote
  master branch, you'd use:

  git diff master origin/master

This shows the differences between your current master branch and what was
fetched from the remote.

Checking the Commit Logs:
* Use git log to see the commit history.
* To view the new commits fetched for a specific branch (e.g., development),
  which are not yet in your local branch, run:

  git log HEAD..origin/development

This will list the commits that are in origin/development but not yet in your
local development branch.

Reviewing Specific Commits:
If you know the commit hash of a specific commit you're interested in, you can
use git show <commit-hash> to view the detailed changes in that commit.

Listing Updated Branches:
* To see which remote-tracking branches have been updated, you can compare the
   output of: 
   - git branch -r 
   or 
   - git branch -avv before and after the fetch.

Remember, git fetch --all only updates your remote-tracking branches (like
origin/master, origin/development, etc.). It doesn't merge any changes into your
local working branches. To integrate these changes, you would typically use git
merge or git rebase depending on your workflow preferences.

